[ 주요 키워드 ]
1. 접근 제한자 : 다른 클래스가 특정한 클래스에 접근할 때 사용
    1) public       : 모든 클래스에서 접근 가능
    2) private      : 현재 클래스에서만 접근 가능
    3) (default)    : 동일/하위 패키지에서만 접근 가능 , 생략되어있음
    4) protected    : 동일/하위 패키지에서만 접근 가능 , 상속관계에선 예외
2. import : 다른 클래스 불러오기
   -> 현재 클래스에서 다른 패키지의 클래스를 불러올 때 사용
   -> 보통 라이브러리를 사용할 때 사용
3. final  : 수정이 불가능하게 만드는 키워드
   -> 초기값이 무조건 필요 (없으면 오류 발생)
4. static : 객체 생성없이 사용할 수 있게 해주는 키워드
   -> 컴파일될 때 우선할당되고, 프로그램 종료시 메모리 삭제
   -> static으로 선언된 메소드는 클래스명.메소드명();으로 접근 가능

[ 관례적인 사용법 ]
1. getter / setter : private 멤버변수에 접근할 수 있게 해주는 메소드
2. public static final : 상수 만드는 키워드

[ 구분할 용어 ]
1. 변수
    1) 멤버변수 : 메소드 밖에서 선언된 객체의 속성
        class 클래스명{ int a; }
    2) 지역변수 : 메소드 안에서 선언된 변수
        class 클래스명{ void 메소드명(){ int a; }}
    3) 매개변수 : 메소드 호출 시, 전달받은 인수를 저장한 변수
        class 클래스명{ void 메소드명( int a ){}}
    4) 정적변수 : 멤버변수 앞에 static
        class 클래스명{ static int a; }
2.
    1) 클래스   : 객체를 생성하기 위한 설계도 ( 실체가 없음 )
    2) 객체     : 속성과 기능을 갖는 실체물 ( 논리적 개념 )
    3) 인스턴스 : 속성과 기능이 생성된 형태 ( 물리적 개념 )