package Day06;

public class Example2 { // Example2 class start
    public static void main(String[] args) { // main start

        /*
        [ 클래스와 객체 ]
        1. 객체
            1) 정의 : '주체'가 아닌 의사나 행위를 미치는 대상
            2) 종류 : 물리적(사람, 안경, 물리), 논리적(주문, 강의) 등등 모든 것들
                속성과 기능을 정의할 수 있다면 객체
            3) 객체지향 프로그래밍 : 개발자(주체)가 컴퓨터 안에서 대상(객체)을 만드는 것
            4) 만드는 방법
                (1) new 클래스명();
                (2) 클래스명 변수명 = new 클래스명();
            5) 객체 내 멤버변수 호출 방법 ( .(접근 연산자) 사용)
                - 변수명.멤버변수
            6) 객체 내 멤버변수 값 수정
                - 변수명.멤버변수 = 새로운값;
            7) 객체 내 멤버변수 삭제 / 추가 불가능
                - 실행 도중에 클래스 정보를 수정할 수 없다. -> 이미 컴파일되었기 때문에

        2. 클래스
            1) 정의 : 객체를 만들기 위한 설계도
                     객체 내 필요한 속성과 기능을 정의하는 틀
                     속성과 기능을 코드로 표현
                - 속성 : 대상의 본질적인 특징 / 성질 / 특성        -> 멤버변수
                - 기능 : 대상의 작동 / 행위 / 이벤트              -> 멤버함수 , 메소드
                ** 자바의 모든 코드는 클래스 단위로 컴파일된다. **
            2) 만드는 방법
                (1) class 클래스명{ -> 다른 클래스 밖에서 선언
                    타입 멤버변수명;
                 };
                (2) 별도의 파일 만들기
            3) 사용 목적
                (1) 실행 클래스 : main 함수를 갖는 클래스
                (2) 설계 클래스 : 객체를 만들기 위한 클래스(= main 함수를 갖지 않는 클래스)

        3. 생활 속 예시
            1) 학생 객체 만들기
                (1) 클래스 정의하기 (= 속성과 기능 만들기)
                    - 학생에게 속성 부여 : 학번, 이름, 전화번호 등등
                    - 학생에게 기능 부여 : 공부하기(), 밥먹기(), 잠자기() 등등
                (2) 객체 정의하기
                    new 학생();
                (3) 객체 내 멤버변수, 메소드에 접근하기
                    학생.학번 / 학생.이름 / 학생.전화번호
            2) 붕어빵 객체 만들기
                (1) 클래스 정의하기
                    - 붕어빵 속성 : 내용물, 가격 등등
                    - 붕어빵 기능 : 굽기(), 꺼내기(), 판매() 등등
                (2) 객체 정의하기
                    new 붕어빵();
                (3) 객체 내 멤버변수, 메소드에 접근하기
                    붕어빵.내용물 / 붕어빵.가격
        */
        // [1] 학생 클래스 만들기 (= 학생 객체를 만들기 위한 속성과 기능을 정의)
            // 1. 다른 클래스 밖에서 선언
                // class 클래스명{ -> 다른 클래스 밖에서 선언
                //     타입 멤버변수명;
                // };
        // [2] 학생 클래스를 이용한 학생 객체 만들기 -> 자바는 객체를 만들기 위해서 *무조건* 클래스가 필요하다.
            // 2. 객체 만들기        -> new 클래스명();
        new Student();  // 객체 생성
        // [3] 주로 객체는 변수에 저장하여 사용 -> 타입 변수명 = 값; -> 타입 변수명 = 객체;
            // 주로 객체를 저장하는 변수의 타입은 객체의 클래스명으로 선언한다. -> 클래스명 변수명 = new 클래스명();
        Student s1 = new Student();
        // [4] 생성된 객체 정보 호출
        System.out.println( s1 );               // 객체의 주소값 반환 : Day06.Student@119d7047
        // [5] 객체 내 멤버변수 호출
        System.out.println( s1.studentID );     // '0' 반환    -> 초기값이 없기 때문
        System.out.println( s1.studentName);    // 'null' 반환 -> 초기값이 없기 때문
        // [6] 객체 내 멤버변수 값 수정
        s1.studentID = 1;                       // s1.studentID를 1로 수정
        s1.studentName = "유재석";               // s1.studentName을 "유재석"으로 수정
        System.out.println( s1.studentID );     // '1' 반환       -> 1로 수정되었기 때문
        System.out.println( s1.studentName);    // "유재석" 반환   -> "유재석"으로 수정되었기 때문

        // [7] 붕어빵 객체 만들기
            // 1) 붕어빵 클래스 만들기 -> 별도의 파일을 만들어서 진행
            // 붕어빵 장사를 하기 전에 붕어빵틀이 있어야한다.

            // 2) 붕어빵 객체 만들기
                // 요구사항 : 팥 2개, 슈크림 1개 주세요~
        // 팥 붕어빵 객체 1개 생성
        붕어빵틀 빵1 = new 붕어빵틀();
        빵1.내용물 = "팥";
        빵1.가격 = 1000;

        // 팥 붕어빵 객체 1개 생성
        붕어빵틀 빵2 = new 붕어빵틀();
        빵2.내용물 = "팥";
        빵2.가격 = 1000;
        // 객체 내 동일한 데이터를 갖더라도 서로 다른 객체이다.
        // new 연산자는 항상 새로운 객체를 만들어내는 객체 생성 키워드이다.

        // 슈크림 붕어빵 객체 1개 생성
        붕어빵틀 빵3 = new 붕어빵틀();
        빵3.내용물 = "슈크림";
        빵3.가격 = 1500;
            // 3) 객체와 배열의 관계 : 배열은 동일한 타입의 데이터를 여러개 저장할 수 있다.
                // - 요구사항 : 주문한 붕어빵 3개를 비닐봉지에 넣어주세요~
        // 서로 다른 타입들의 데이터 묶음 -> 객체      -> 내용물 / 가격     -> 객체화
        // 서로 같은 타입들의 데이터 묶음 -> 배열      -> 빵1 / 빵2 / 빵3  -> 배열화
        붕어빵틀[] 빵봉지 = { 빵1, 빵2, 빵3 };


    } // main end
} // Example2 class end

class Student{ // Student class start
    int studentID;      // '학번' 속성 정의
    String studentName; // '이름' 속성 정의
} // Student class end