package Day08;

public class Example1 { // Example1 class start
    public static void main(String[] args) { // main start
        /*
        [ 생성자 ]
        1. 정의 : 객체를 생성할 때(= new 연산자를 사용할 때) 사용되는 초기화 담당 함수
            * 초기화 : 초기에 값을 대입, 처음에 로직처리
            * 매개변수는 있지만, 반환값이 없음.(<-> 메소드와 비교)
        2. 규칙
            1) 클래스명과 *무조건* 동일한 이름을 갖는다.
                클래스명 변수명 = new 생성자명();
                *만일 클래스명과 이름이 다르면, 메소드 취급
            2) 오버로드 / 오버라이딩
                (1) 오버로드 : 메소드/생성자는 매개변수의 개수/타입/순서가 다르면, 동일한 이름으로 여러개 선언이 가능하다.
                    * 변수명(식별자)는 동일한 이름을 가질 수 없다.
                    -> 메소드/생성자는 동일한 이름으로 여러개 만들 수 없다.
                    * 오버로드의 존재 이유?
                    -> 객체 멤버변수는 객체마다 할당, 메소드는 공유되어 사용 -> 같은 이름의 메소드를 다른 기능으로 쓰기 위해서?
        3. 종류
            1) 기본 생성자
                형태 : 생성자명(){ };
                사용 : new 생성자명();
                -> 클래스 내 다른 생성자가 없으면 자동으로 (컴파일될 때) 생성된다.
                -> 다른 생성자가 있으면 직접 기본 생성자를 정의해야한다.
            2) 매개변수가 있는 생성자
        4. 목적
            1) 객체 생성 시, 빠른 멤버변수 초기화
            2) 협업에 있어서, 규칙적인 값 초기화 -> private로 잠궈버리면 그 멤버변수를 초기화할 수 없음.
        5. 단점
            1) 규칙에 따른 복잡도 증가 -> 자유도 감소
        6. 빠른 생성
            1) 코드 파일 내 빈공간 우클릭
            2) 생성 -> 생성자 -> 멤버변수 선택

        */
        // [1] 기본 생성자를 이용한 객체 생성
        // -> 클래스명 변수명 = new 생성자명();
        Phone phone1 = new Phone();

        // [2] 매개변수를 갖는 생성자를 이용한 객체 생성
        Phone phone2 = new Phone( "갤럭시S25", "실버" );

        // [3] this를 사용하는 생성자
        Phone phone3 = new Phone( "아이폰16", "화이트", 1500000 );

        // [4] 존재하지 않는 생성자 만들어보기
     // Phone phone4 = new Phone( 1500000, "화이트", "아이폰15"); -> 오류 발생

    } // main end
} // Example1 class end
